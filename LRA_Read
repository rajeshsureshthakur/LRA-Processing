import java.io.*;
import java.util.*;

public class TransactionProcessor {
    public static void main(String[] args) {
        String inputFile = "input.csv";  // Replace with your input file path
        String outputFile = "output.csv"; // Output will be CSV instead of Excel
        
        try {
            processTransactions(inputFile, outputFile);
            System.out.println("Processing completed successfully! Check " + outputFile);
        } catch (Exception e) {
            System.err.println("Error processing file: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    public static void processTransactions(String inputFile, String outputFile) throws IOException {
        // Create map to store transaction names and response times
        TreeMap<String, String> results = new TreeMap<>();
        
        // Read specific rows from CSV
        try (BufferedReader br = new BufferedReader(new FileReader(inputFile))) {
            // Read first row (transaction names)
            String firstLine = br.readLine();
            if (firstLine == null) {
                throw new IOException("CSV file is empty");
            }
            String[] transactionNames = splitCSVLine(firstLine);
            
            // Skip to row 95 (to get to row 96)
            for (int i = 0; i < 94; i++) {
                if (br.readLine() == null) {
                    throw new IOException("File does not contain row 96");
                }
            }
            
            // Read row 96 (response times)
            String responseLine = br.readLine();
            if (responseLine == null) {
                throw new IOException("File does not contain row 96");
            }
            String[] responseTimes = splitCSVLine(responseLine);
            
            // Process the data
            for (int i = 0; i < transactionNames.length && i < responseTimes.length; i++) {
                String transName = transactionNames[i].trim();
                if (!transName.isEmpty()) {
                    results.put(transName, responseTimes[i].trim());
                }
            }
        }
        
        // Write results to output file
        try (PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(outputFile)))) {
            // Write header
            writer.println("Application_Transaction,Response_Time");
            
            // Write data
            for (Map.Entry<String, String> entry : results.entrySet()) {
                String transactionName = entry.getKey().contains(",") ? 
                    "\"" + entry.getKey() + "\"" : entry.getKey();
                writer.println(transactionName + "," + entry.getValue());
            }
        }
    }
    
    private static String[] splitCSVLine(String line) {
        List<String> result = new ArrayList<>();
        boolean inQuotes = false;
        StringBuilder currentValue = new StringBuilder();
        
        for (char c : line.toCharArray()) {
            if (c == '"') {
                inQuotes = !inQuotes;
            } else if (c == ',' && !inQuotes) {
                result.add(currentValue.toString().trim().replaceAll("^\"|\"$", ""));
                currentValue.setLength(0);
            } else {
                currentValue.append(c);
            }
        }
        result.add(currentValue.toString().trim().replaceAll("^\"|\"$", ""));
        
        return result.toArray(new String[0]);
    }
}
