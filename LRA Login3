import java.io.IOException;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.HttpCookie;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.List;
import org.json.JSONObject;

class LoadRunnerAPIException extends RuntimeException {
    public LoadRunnerAPIException(String message) {
        super(message);
    }

    public LoadRunnerAPIException(String message, Throwable cause) {
        super(message, cause);
    }
}

public class LoadRunnerAPIClient {
    private final String baseUrl;
    private final String authToken;
    private final HttpClient httpClient;
    private final CookieManager cookieManager;
    private String xsrfToken;
    private static final int TIMEOUT_SECONDS = 30;

    public LoadRunnerAPIClient(String baseUrl, String authToken) {
        this.baseUrl = baseUrl;
        this.authToken = authToken;
        this.cookieManager = new CookieManager();
        this.cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
        
        this.httpClient = HttpClient.newBuilder()
                .cookieHandler(cookieManager)
                .connectTimeout(Duration.ofSeconds(TIMEOUT_SECONDS))
                .build();
    }

    private void extractXsrfTokenFromCookies() {
        try {
            URI uri = new URI(baseUrl);
            List<HttpCookie> cookies = cookieManager.getCookieStore().get(uri);
            System.out.println("All cookies received:");
            for (HttpCookie cookie : cookies) {
                System.out.println("Cookie: " + cookie.getName() + " = " + cookie.getValue());
                // Look for XSRF token in cookie names
                if (cookie.getName().toLowerCase().contains("xsrf")) {
                    xsrfToken = cookie.getValue();
                    System.out.println("Found XSRF token in cookie: " + xsrfToken);
                    break;
                }
            }
        } catch (Exception e) {
            System.err.println("Failed to extract XSRF token from cookies: " + e.getMessage());
        }
    }

    public void authenticate() throws IOException, InterruptedException {
        try {
            String authEndpoint = "/res/Authenticate";
            System.out.println("Authenticating with endpoint: " + baseUrl + authEndpoint);

            HttpRequest authRequest = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + authEndpoint))
                    .header("Content-Type", "application/json")
                    .header("Authorization", "Bearer " + authToken)
                    .GET()
                    .build();

            HttpResponse<String> response = httpClient.send(authRequest, 
                    HttpResponse.BodyHandlers.ofString());

            System.out.println("Authentication response status: " + response.statusCode());
            
            // Print all response headers for debugging
            System.out.println("Response Headers:");
            response.headers().map().forEach((key, values) -> {
                System.out.println(key + ": " + String.join(", ", values));
            });

            if (response.statusCode() >= 400) {
                throw new LoadRunnerAPIException("Authentication failed: " + response.statusCode() + 
                    ", Response: " + response.body());
            }

            // Extract XSRF token from cookies
            extractXsrfTokenFromCookies();

            if (xsrfToken == null) {
                System.out.println("Warning: XSRF token not found in cookies or headers");
            }

        } catch (Exception e) {
            throw new LoadRunnerAPIException("Authentication failed", e);
        }
    }

    public String getResults(int runId) throws IOException, InterruptedException {
        try {
            if (xsrfToken == null) {
                throw new LoadRunnerAPIException("No XSRF token available. Please authenticate first.");
            }

            String endpoint = "/test/service/runservice.asms/GetResults";
            
            JSONObject payload = new JSONObject();
            payload.put("runId", runId);
            
            System.out.println("\nMaking GetResults request:");
            System.out.println("URL: " + baseUrl + endpoint);
            System.out.println("XSRF Token: " + xsrfToken);
            System.out.println("Payload: " + payload);
            System.out.println("Current Cookies: ");
            printAllCookies();

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + endpoint))
                    .header("Content-Type", "application/json")
                    .header("X-XSRF-TOKEN", xsrfToken)
                    .header("Authorization", "Bearer " + authToken)
                    .POST(HttpRequest.BodyPublishers.ofString(payload.toString()))
                    .build();

            HttpResponse<String> response = httpClient.send(request, 
                    HttpResponse.BodyHandlers.ofString());

            System.out.println("GetResults response status: " + response.statusCode());
            System.out.println("Response body: " + response.body());

            if (response.statusCode() >= 400) {
                throw new LoadRunnerAPIException("Failed to get results. Status: " + 
                    response.statusCode() + ", Body: " + response.body());
            }

            return response.body();
            
        } catch (Exception e) {
            throw new LoadRunnerAPIException("Failed to get results", e);
        }
    }

    private void printAllCookies() {
        try {
            URI uri = new URI(baseUrl);
            List<HttpCookie> cookies = cookieManager.getCookieStore().get(uri);
            for (HttpCookie cookie : cookies) {
                System.out.println(cookie.getName() + ": " + cookie.getValue());
            }
        } catch (Exception e) {
            System.err.println("Failed to print cookies: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        try {
            LoadRunnerAPIClient client = new LoadRunnerAPIClient(
                    "https://myloadrunner:650",
                    "your-auth-token-here"
            );

            client.authenticate();
            String results = client.getResults(12345);
            System.out.println("Results retrieved successfully!");
            System.out.println(results);

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
