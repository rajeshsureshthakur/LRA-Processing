import java.io.IOException;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.HttpCookie;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import org.json.JSONObject;

public class LoadRunnerAPIClient {
    private final String baseUrl;
    private final String authToken;
    private String xsrfToken;
    private final HttpClient httpClient;
    private final CookieManager cookieManager;
    private static final int TIMEOUT_SECONDS = 30;

    public LoadRunnerAPIClient(String baseUrl, String authToken) {
        this.baseUrl = baseUrl;
        this.authToken = authToken;
        
        this.cookieManager = new CookieManager();
        this.cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
        
        this.httpClient = HttpClient.newBuilder()
                .cookieHandler(cookieManager)
                .connectTimeout(Duration.ofSeconds(TIMEOUT_SECONDS))
                .build();
    }

    public void setXsrfToken(String token) {
        this.xsrfToken = token;
        try {
            URI uri = new URI(baseUrl);
            HttpCookie xsrfCookie = new HttpCookie("XSRF-TOKEN", token);
            xsrfCookie.setPath("/");
            cookieManager.getCookieStore().add(uri, xsrfCookie);
        } catch (Exception e) {
            System.err.println("Failed to store XSRF cookie: " + e.getMessage());
        }
    }

    public String getResults(int runId) throws IOException, InterruptedException {
        try {
            // Specific endpoint for GetResults
            String endpoint = "/test/service/runservice.asms/GetResults";
            
            // Create required payload
            JSONObject payload = new JSONObject();
            payload.put("runId", runId);
            
            System.out.println("\nRequest Details:");
            System.out.println("URL: " + baseUrl + endpoint);
            System.out.println("Payload: " + payload.toString(2));

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + endpoint))
                    .header("Content-Type", "application/json")
                    .header("X-XSRF-TOKEN", xsrfToken)
                    .POST(HttpRequest.BodyPublishers.ofString(payload.toString()))
                    .build();

            HttpResponse<String> response = httpClient.send(request, 
                    HttpResponse.BodyHandlers.ofString());

            System.out.println("\nResponse Details:");
            System.out.println("Status Code: " + response.statusCode());
            System.out.println("Response Body: " + response.body());

            if (response.statusCode() >= 400) {
                throw new LoadRunnerAPIException("API request failed. Status: " + response.statusCode() 
                        + ", Response: " + response.body());
            }

            return response.body();
            
        } catch (Exception e) {
            throw new LoadRunnerAPIException("Request failed: " + e.getMessage(), e);
        }
    }

    public static void main(String[] args) {
        try {
            // Initialize client with your server URL
            LoadRunnerAPIClient client = new LoadRunnerAPIClient(
                    "https://myloadrunner:650",
                    "your-auth-token"  // If not needed, you can pass empty string
            );

            // Set your XSRF token
            client.setXsrfToken("your-xsrf-token-here");

            // Example: Get results for run ID 12345
            String results = client.getResults(12345);
            System.out.println("Results retrieved successfully!");
            System.out.println(results);

        } catch (Exception e) {
            System.err.println("Error accessing API: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

class LoadRunnerAPIException extends RuntimeException {
    public LoadRunnerAPIException(String message) {
        super(message);
    }

    public LoadRunnerAPIException(String message, Throwable cause) {
        super(message, cause);
    }
}
