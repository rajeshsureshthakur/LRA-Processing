import java.io.IOException;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.Random;
import org.json.JSONObject;

class XsrfTokenGenerator {
    private static final String SESSION_PART = "19371eb9";  // Constant middle part
    private final Random random = new Random();
    private int sequence = 0;

    public String generateToken() {
        // Generate random 8-character hex for first part
        String randomPart = String.format("%08x", random.nextInt(0xFFFFFFFF));
        
        // Get 3-character hex for sequence (incrementing)
        String sequencePart = String.format("%03x", sequence++ % 0xFFF);
        
        // Combine all parts
        return randomPart + SESSION_PART + sequencePart;
    }
}

class LoadRunnerAPIException extends RuntimeException {
    public LoadRunnerAPIException(String message) {
        super(message);
    }

    public LoadRunnerAPIException(String message, Throwable cause) {
        super(message, cause);
    }
}

public class LoadRunnerAPIClient {
    private final String baseUrl;
    private final String authToken;
    private final HttpClient httpClient;
    private final CookieManager cookieManager;
    private final XsrfTokenGenerator tokenGenerator;

    public LoadRunnerAPIClient(String baseUrl, String authToken) {
        this.baseUrl = baseUrl;
        this.authToken = authToken;
        this.cookieManager = new CookieManager();
        this.cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
        this.tokenGenerator = new XsrfTokenGenerator();
        
        this.httpClient = HttpClient.newBuilder()
                .cookieHandler(cookieManager)
                .connectTimeout(Duration.ofSeconds(30))
                .build();
    }

    public void authenticate() throws IOException, InterruptedException {
        try {
            String authEndpoint = "/res/Authenticate";
            System.out.println("Authenticating with endpoint: " + baseUrl + authEndpoint);

            // Generate initial XSRF token
            String xsrfToken = tokenGenerator.generateToken();
            System.out.println("Generated initial X-XSRF-Header: " + xsrfToken);

            HttpRequest authRequest = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + authEndpoint))
                    .header("Content-Type", "application/json")
                    .header("Authorization", "Bearer " + authToken)
                    .header("X-XSRF-Header", xsrfToken)
                    .GET()
                    .build();

            HttpResponse<String> response = httpClient.send(authRequest, 
                    HttpResponse.BodyHandlers.ofString());

            System.out.println("Authentication response status: " + response.statusCode());

            if (response.statusCode() >= 400) {
                throw new LoadRunnerAPIException("Authentication failed: " + response.statusCode() + 
                    ", Response: " + response.body());
            }

        } catch (Exception e) {
            throw new LoadRunnerAPIException("Authentication failed", e);
        }
    }

    public String getResults(int runId) throws IOException, InterruptedException {
        try {
            String endpoint = "/test/service/runservice.asms/GetResults";
            
            // Generate new token for this request
            String xsrfToken = tokenGenerator.generateToken();
            System.out.println("Generated new X-XSRF-Header: " + xsrfToken);
            
            JSONObject payload = new JSONObject();
            payload.put("runId", runId);
            
            System.out.println("\nMaking GetResults request:");
            System.out.println("URL: " + baseUrl + endpoint);
            System.out.println("Payload: " + payload);

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + endpoint))
                    .header("Content-Type", "application/json")
                    .header("Authorization", "Bearer " + authToken)
                    .header("X-XSRF-Header", xsrfToken)
                    .POST(HttpRequest.BodyPublishers.ofString(payload.toString()))
                    .build();

            HttpResponse<String> response = httpClient.send(request, 
                    HttpResponse.BodyHandlers.ofString());

            System.out.println("GetResults response status: " + response.statusCode());
            if (response.statusCode() >= 400) {
                System.out.println("Error response body: " + response.body());
                throw new LoadRunnerAPIException("Failed to get results. Status: " + 
                    response.statusCode() + ", Body: " + response.body());
            }

            return response.body();
            
        } catch (Exception e) {
            throw new LoadRunnerAPIException("Failed to get results", e);
        }
    }

    public static void main(String[] args) {
        try {
            LoadRunnerAPIClient client = new LoadRunnerAPIClient(
                    "https://myloadrunner:650",
                    "your-auth-token-here"
            );

            client.authenticate();
            String results = client.getResults(12345);
            System.out.println("Results retrieved successfully!");
            System.out.println(results);

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
