import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import org.json.JSONObject;

public class LoadRunnerAPIClient {
    private final String baseUrl;
    private final String username;
    private final String password;
    private String xsrfToken;
    private final HttpClient httpClient;
    private static final int TIMEOUT_SECONDS = 30;

    public LoadRunnerAPIClient(String baseUrl, String username, String password) {
        this.baseUrl = baseUrl;
        this.username = username;
        this.password = password;
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(TIMEOUT_SECONDS))
                .build();
        authenticate();
    }

    private void authenticate() {
        try {
            JSONObject authData = new JSONObject();
            authData.put("username", username);
            authData.put("password", password);

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + "/auth/login"))
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(authData.toString()))
                    .build();

            HttpResponse<String> response = httpClient.send(request, 
                    HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() != 200) {
                throw new RuntimeException("Authentication failed: " + response.statusCode());
            }

            // Get initial XSRF token from response headers
            updateXsrfToken(response);

        } catch (Exception e) {
            throw new RuntimeException("Failed to authenticate: " + e.getMessage(), e);
        }
    }

    private void updateXsrfToken(HttpResponse<String> response) {
        String newToken = response.headers().firstValue("X-XSRF-TOKEN").orElse(null);
        if (newToken != null) {
            this.xsrfToken = newToken;
        }
    }

    public String getTestReport(String runId) throws IOException, InterruptedException {
        String endpoint = String.format("/runs/%s/report", runId);
        return makeRequest("GET", endpoint, null);
    }

    private String makeRequest(String method, String endpoint, String requestBody) 
            throws IOException, InterruptedException {
        HttpRequest.Builder requestBuilder = HttpRequest.newBuilder()
                .uri(URI.create(baseUrl + endpoint))
                .header("X-XSRF-TOKEN", xsrfToken)
                .header("Content-Type", "application/json");

        // Set appropriate HTTP method
        HttpRequest request;
        switch (method.toUpperCase()) {
            case "GET":
                request = requestBuilder.GET().build();
                break;
            case "POST":
                request = requestBuilder.POST(HttpRequest.BodyPublishers
                        .ofString(requestBody != null ? requestBody : ""))
                        .build();
                break;
            case "PUT":
                request = requestBuilder.PUT(HttpRequest.BodyPublishers
                        .ofString(requestBody != null ? requestBody : ""))
                        .build();
                break;
            default:
                throw new IllegalArgumentException("Unsupported HTTP method: " + method);
        }

        HttpResponse<String> response = httpClient.send(request, 
                HttpResponse.BodyHandlers.ofString());

        // Update token if new one is provided
        updateXsrfToken(response);

        if (response.statusCode() >= 400) {
            throw new IOException("API request failed with status: " + response.statusCode() 
                    + ", body: " + response.body());
        }

        return response.body();
    }

    // Example main method to demonstrate usage
    public static void main(String[] args) {
        try {
            LoadRunnerAPIClient client = new LoadRunnerAPIClient(
                    "https://your-loadrunner-pc-server",
                    "your_username",
                    "your_password"
            );

            // Get report for a specific run
            String reportData = client.getTestReport("run_id_123");
            System.out.println("Report data: " + reportData);

        } catch (Exception e) {
            System.err.println("Error accessing API: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

// Custom exception class for API-specific errors
class LoadRunnerAPIException extends RuntimeException {
    public LoadRunnerAPIException(String message) {
        super(message);
    }

    public LoadRunnerAPIException(String message, Throwable cause) {
        super(message, cause);
    }
}
