import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import org.json.JSONObject;

public class LoadRunnerAPIClient {
    private final String baseUrl;
    private final String authToken;
    private String xsrfToken;
    private final HttpClient httpClient;
    private static final int TIMEOUT_SECONDS = 30;

    public LoadRunnerAPIClient(String baseUrl, String authToken) {
        this.baseUrl = baseUrl;
        this.authToken = authToken;
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(TIMEOUT_SECONDS))
                .build();
        initializeXsrfToken();
    }

    private void initializeXsrfToken() {
        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + "/api/init"))
                    .header("Authorization", "Bearer " + authToken)
                    .header("Content-Type", "application/json")
                    .GET()
                    .build();

            HttpResponse<String> response = httpClient.send(request, 
                    HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() != 200) {
                throw new LoadRunnerAPIException("Failed to initialize XSRF token: " + response.statusCode());
            }

            updateXsrfToken(response);

        } catch (Exception e) {
            throw new LoadRunnerAPIException("Failed to initialize client: " + e.getMessage(), e);
        }
    }

    private void updateXsrfToken(HttpResponse<String> response) {
        String newToken = response.headers().firstValue("X-XSRF-TOKEN").orElse(null);
        if (newToken != null) {
            this.xsrfToken = newToken;
        }
    }

    // New method to post test report data
    public String postTestReportData(String runId, JSONObject reportData) throws IOException, InterruptedException {
        String endpoint = String.format("/runs/%s/report", runId);
        return makeRequest("POST", endpoint, reportData.toString());
    }

    // New method to post test results
    public String postTestResults(String runId, JSONObject results) throws IOException, InterruptedException {
        String endpoint = String.format("/runs/%s/results", runId);
        return makeRequest("POST", endpoint, results.toString());
    }

    // Generic method to make POST request with any endpoint and payload
    public String postRequest(String endpoint, JSONObject payload) throws IOException, InterruptedException {
        return makeRequest("POST", endpoint, payload.toString());
    }

    private String makeRequest(String method, String endpoint, String requestBody) 
            throws IOException, InterruptedException {
        HttpRequest.Builder requestBuilder = HttpRequest.newBuilder()
                .uri(URI.create(baseUrl + endpoint))
                .header("Authorization", "Bearer " + authToken)
                .header("X-XSRF-TOKEN", xsrfToken)
                .header("Content-Type", "application/json");

        HttpRequest request = switch (method.toUpperCase()) {
            case "GET" -> requestBuilder.GET().build();
            case "POST" -> requestBuilder.POST(HttpRequest.BodyPublishers
                    .ofString(requestBody != null ? requestBody : ""))
                    .build();
            case "PUT" -> requestBuilder.PUT(HttpRequest.BodyPublishers
                    .ofString(requestBody != null ? requestBody : ""))
                    .build();
            default -> throw new IllegalArgumentException("Unsupported HTTP method: " + method);
        };

        HttpResponse<String> response = httpClient.send(request, 
                HttpResponse.BodyHandlers.ofString());

        updateXsrfToken(response);

        if (response.statusCode() >= 400) {
            throw new LoadRunnerAPIException("API request failed with status: " + response.statusCode() 
                    + ", body: " + response.body());
        }

        return response.body();
    }

    // Example usage
    public static void main(String[] args) {
        try {
            String authToken = "your-auth-token-here";
            LoadRunnerAPIClient client = new LoadRunnerAPIClient(
                    "https://your-loadrunner-pc-server",
                    authToken
            );

            // Example 1: Posting test report data
            JSONObject reportData = new JSONObject();
            reportData.put("testName", "Performance Test 1");
            reportData.put("duration", 3600);
            reportData.put("vUsers", 50);
            reportData.put("timestamp", System.currentTimeMillis());

            String response1 = client.postTestReportData("run123", reportData);
            System.out.println("Report posted: " + response1);

            // Example 2: Posting test results
            JSONObject results = new JSONObject();
            results.put("status", "completed");
            results.put("errorRate", 0.02);
            results.put("averageResponseTime", 250);
            results.put("totalRequests", 10000);

            String response2 = client.postTestResults("run123", results);
            System.out.println("Results posted: " + response2);

            // Example 3: Generic POST request
            JSONObject customPayload = new JSONObject();
            customPayload.put("customField1", "value1");
            customPayload.put("customField2", "value2");
            customPayload.put("metadata", new JSONObject()
                .put("environment", "production")
                .put("region", "us-west")
            );

            String response3 = client.postRequest("/api/custom-endpoint", customPayload);
            System.out.println("Custom request response: " + response3);

        } catch (Exception e) {
            System.err.println("Error accessing API: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

class LoadRunnerAPIException extends RuntimeException {
    public LoadRunnerAPIException(String message) {
        super(message);
    }

    public LoadRunnerAPIException(String message, Throwable cause) {
        super(message, cause);
    }
}
