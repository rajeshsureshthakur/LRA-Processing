import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import org.json.JSONObject;

public class LoadRunnerAPIClient {
    private final String baseUrl;
    private final String authToken;
    private String xsrfToken;
    private final HttpClient httpClient;
    private static final int TIMEOUT_SECONDS = 30;

    public LoadRunnerAPIClient(String baseUrl, String authToken) {
        this.baseUrl = baseUrl;
        this.authToken = authToken;
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(TIMEOUT_SECONDS))
                .build();
        // Get initial XSRF token
        initializeXsrfToken();
    }

    private void initializeXsrfToken() {
        try {
            // Make an initial request to get XSRF token
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + "/api/init")) // Adjust endpoint as per your API
                    .header("Authorization", "Bearer " + authToken)
                    .header("Content-Type", "application/json")
                    .GET()
                    .build();

            HttpResponse<String> response = httpClient.send(request, 
                    HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() != 200) {
                throw new LoadRunnerAPIException("Failed to initialize XSRF token: " + response.statusCode());
            }

            updateXsrfToken(response);

        } catch (Exception e) {
            throw new LoadRunnerAPIException("Failed to initialize client: " + e.getMessage(), e);
        }
    }

    private void updateXsrfToken(HttpResponse<String> response) {
        String newToken = response.headers().firstValue("X-XSRF-TOKEN").orElse(null);
        if (newToken != null) {
            this.xsrfToken = newToken;
        }
    }

    public String getTestReport(String runId) throws IOException, InterruptedException {
        String endpoint = String.format("/runs/%s/report", runId);
        return makeRequest("GET", endpoint, null);
    }

    public String getTestResults(String runId) throws IOException, InterruptedException {
        String endpoint = String.format("/runs/%s/results", runId);
        return makeRequest("GET", endpoint, null);
    }

    public String getTestMetrics(String runId) throws IOException, InterruptedException {
        String endpoint = String.format("/runs/%s/metrics", runId);
        return makeRequest("GET", endpoint, null);
    }

    private String makeRequest(String method, String endpoint, String requestBody) 
            throws IOException, InterruptedException {
        HttpRequest.Builder requestBuilder = HttpRequest.newBuilder()
                .uri(URI.create(baseUrl + endpoint))
                .header("Authorization", "Bearer " + authToken)
                .header("X-XSRF-TOKEN", xsrfToken)
                .header("Content-Type", "application/json");

        HttpRequest request;
        switch (method.toUpperCase()) {
            case "GET":
                request = requestBuilder.GET().build();
                break;
            case "POST":
                request = requestBuilder.POST(HttpRequest.BodyPublishers
                        .ofString(requestBody != null ? requestBody : ""))
                        .build();
                break;
            case "PUT":
                request = requestBuilder.PUT(HttpRequest.BodyPublishers
                        .ofString(requestBody != null ? requestBody : ""))
                        .build();
                break;
            default:
                throw new IllegalArgumentException("Unsupported HTTP method: " + method);
        }

        HttpResponse<String> response = httpClient.send(request, 
                HttpResponse.BodyHandlers.ofString());

        // Update token if new one is provided
        updateXsrfToken(response);

        if (response.statusCode() >= 400) {
            throw new LoadRunnerAPIException("API request failed with status: " + response.statusCode() 
                    + ", body: " + response.body());
        }

        return response.body();
    }

    // Example usage
    public static void main(String[] args) {
        try {
            // Initialize client with auth token
            String authToken = "your-auth-token-here";
            LoadRunnerAPIClient client = new LoadRunnerAPIClient(
                    "https://your-loadrunner-pc-server",
                    authToken
            );

            // Example: Get report for a specific run
            String runId = "run_id_123";
            String reportData = client.getTestReport(runId);
            System.out.println("Report data: " + reportData);

            // Get test results
            String resultsData = client.getTestResults(runId);
            System.out.println("Results data: " + resultsData);

            // Get metrics
            String metricsData = client.getTestMetrics(runId);
            System.out.println("Metrics data: " + metricsData);

        } catch (Exception e) {
            System.err.println("Error accessing API: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

class LoadRunnerAPIException extends RuntimeException {
    public LoadRunnerAPIException(String message) {
        super(message);
    }

    public LoadRunnerAPIException(String message, Throwable cause) {
        super(message, cause);
    }
}
