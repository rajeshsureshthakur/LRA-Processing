import java.io.IOException;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.HttpCookie;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.List;
import org.json.JSONObject;

public class LoadRunnerAPIClient {
    private final String baseUrl;
    private final String authToken;
    private String xsrfToken;
    private final HttpClient httpClient;
    private final CookieManager cookieManager;
    private static final int TIMEOUT_SECONDS = 30;

    public LoadRunnerAPIClient(String baseUrl, String authToken) {
        this.baseUrl = baseUrl;
        this.authToken = authToken;
        
        // Initialize cookie manager
        this.cookieManager = new CookieManager();
        this.cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
        
        // Create HttpClient with cookie support
        this.httpClient = HttpClient.newBuilder()
                .cookieHandler(cookieManager)
                .connectTimeout(Duration.ofSeconds(TIMEOUT_SECONDS))
                .build();
                
        initializeXsrfToken();
    }

    private void initializeXsrfToken() {
        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + "/api/init"))
                    .header("Authorization", "Bearer " + authToken)
                    .header("Content-Type", "application/json")
                    .GET()
                    .build();

            HttpResponse<String> response = httpClient.send(request, 
                    HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() != 200) {
                throw new LoadRunnerAPIException("Failed to initialize XSRF token: " + response.statusCode());
            }

            updateXsrfToken(response);
            System.out.println("Current cookies: " + getCookiesAsString());

        } catch (Exception e) {
            throw new LoadRunnerAPIException("Failed to initialize client: " + e.getMessage(), e);
        }
    }

    private String getCookiesAsString() {
        try {
            URI uri = new URI(baseUrl);
            List<HttpCookie> cookies = cookieManager.getCookieStore().get(uri);
            StringBuilder cookieString = new StringBuilder();
            for (HttpCookie cookie : cookies) {
                if (cookieString.length() > 0) cookieString.append("; ");
                cookieString.append(cookie.getName()).append("=").append(cookie.getValue());
            }
            return cookieString.toString();
        } catch (Exception e) {
            return "Error getting cookies: " + e.getMessage();
        }
    }

    private void updateXsrfToken(HttpResponse<String> response) {
        String newToken = response.headers().firstValue("X-XSRF-TOKEN").orElse(null);
        if (newToken != null) {
            this.xsrfToken = newToken;
            // Store XSRF token as a cookie if not already stored
            try {
                URI uri = new URI(baseUrl);
                HttpCookie xsrfCookie = new HttpCookie("XSRF-TOKEN", newToken);
                xsrfCookie.setPath("/");
                cookieManager.getCookieStore().add(uri, xsrfCookie);
            } catch (Exception e) {
                System.err.println("Failed to store XSRF cookie: " + e.getMessage());
            }
        }
    }

    private String makeRequest(String method, String endpoint, String requestBody) 
            throws IOException, InterruptedException {
        try {
            String fullUrl = baseUrl + endpoint;
            
            // Get current cookies
            String cookies = getCookiesAsString();
            System.out.println("Sending request with cookies: " + cookies);

            HttpRequest.Builder requestBuilder = HttpRequest.newBuilder()
                    .uri(URI.create(fullUrl))
                    .header("Authorization", "Bearer " + authToken)
                    .header("X-XSRF-TOKEN", xsrfToken)
                    .header("Content-Type", "application/json")
                    .header("Cookie", cookies);  // Add cookies to request

            HttpRequest request = switch (method.toUpperCase()) {
                case "GET" -> requestBuilder.GET().build();
                case "POST" -> requestBuilder.POST(HttpRequest.BodyPublishers
                        .ofString(requestBody != null ? requestBody : ""))
                        .build();
                default -> throw new IllegalArgumentException("Unsupported HTTP method: " + method);
            };

            HttpResponse<String> response = httpClient.send(request, 
                    HttpResponse.BodyHandlers.ofString());

            // Print response cookies
            System.out.println("Received cookies: " + getCookiesAsString());

            if (response.statusCode() >= 400) {
                throw new LoadRunnerAPIException("API request failed with status: " + response.statusCode() 
                        + ", body: " + response.body());
            }

            updateXsrfToken(response);
            return response.body();
            
        } catch (Exception e) {
            throw new LoadRunnerAPIException("Request failed: " + e.getMessage(), e);
        }
    }

    public String postTestReportData(String runId, JSONObject reportData) throws IOException, InterruptedException {
        String endpoint = String.format("/runs/%s/report", runId);
        return makeRequest("POST", endpoint, reportData.toString());
    }

    // Example usage
    public static void main(String[] args) {
        try {
            LoadRunnerAPIClient client = new LoadRunnerAPIClient(
                    "https://your-loadrunner-pc-server",
                    "your-auth-token"
            );

            // Create test payload
            JSONObject reportData = new JSONObject();
            reportData.put("testName", "Performance Test 1");
            reportData.put("duration", 3600);
            reportData.put("vUsers", 50);
            reportData.put("timestamp", System.currentTimeMillis());

            // Send request with cookies
            String response = client.postTestReportData("run123", reportData);
            System.out.println("Response: " + response);

        } catch (Exception e) {
            System.err.println("Error accessing API: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

class LoadRunnerAPIException extends RuntimeException {
    public LoadRunnerAPIException(String message) {
        super(message);
    }

    public LoadRunnerAPIException(String message, Throwable cause) {
        super(message, cause);
    }
}
